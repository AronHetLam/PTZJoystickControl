# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build release packages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  bump-version:
    runs-on: ubuntu-latest
    
    outputs: 
      VERSION: ${{ steps.version-select.outputs.VERSION }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Bump version
        if: ${{ github.event_name == 'push' && github.run_attempt == 1 }}
        uses: SiqiLu/dotnet-bump-version@2.0.0
        with:
          version_files: "Gui/Gui.csproj"
          version_mask: 0.0.1.0
          version_overwrite: "*.*.*.${{ github.run_number }}"

      - name: Tag version in git and set as output
        id: version-select
        run: |
          version=v$(grep -oP '<Version>\K(.*)(?=\.\d+</Version>)' Gui/Gui.csproj)
          echo "Version: ${version}"
          git tag $version
          git push --tags
          echo "VERSION=$version" >> $GITHUB_OUTPUT

  build:
    needs: bump-version
    runs-on: windows-latest
    strategy:
       matrix:
          arch: [x86, x64]

    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    ## Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    - name: Publish application
      run: dotnet publish Gui/Gui.csproj -c PublishRelease -r $env:Runtime --sc
      env:
        Runtime: ${{ format('win7-{0}', matrix.arch) }}

    ## Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create msi package
      run: dotnet build Packaging/Windows/Windows.wixproj -c PublishRelease -p:OutputName=$env:OutputName -o Packaging/Windows/Packages -p:platform=$env:Arch #-p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Arch: ${{ matrix.arch }}
        OutputName: ${{ format('PTZJoystickControl_{0}_{1}', needs.bump-version.outputs.VERSION, matrix.arch) }}

    ## Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Upload build artifacts (msi packages)
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v3
      with:
        name: MSI Packages
        path: Packaging/Windows/Packages/**/*.msi
        
    - name: GH Release
      uses: softprops/action-gh-release@v0.1.15
      with:
        draft: true
        tag_name: ${{ needs.bump-version.outputs.VERSION }}
        files: Packaging/Windows/Packages/**/*.msi
