name: Build release packages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  bump-version:
    runs-on: ubuntu-latest
    
    outputs: 
      VERSION: ${{ steps.version-select.outputs.VERSION }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Bump version
        if: ${{ github.event_name == 'push' && github.run_attempt == 1 }}
        uses: SiqiLu/dotnet-bump-version@2.0.0
        with:
          version_files: "Gui/Gui.csproj"
          version_mask: 0.0.1.0
          version_overwrite: "*.*.*.${{ github.run_number }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag version in git and set as output
        id: version-select
        run: |
          version=$(grep -oP '<Version>\K(.*)(?=\.\d+</Version>)' Gui/Gui.csproj)
          echo "Version: ${version}"
          git tag v$version
          git push --tags
          echo "VERSION=$version" >> $GITHUB_OUTPUT

  build-windows-packeges:
    needs: bump-version
    runs-on: windows-latest
    strategy:
       matrix:
          arch: [x86, x64]

    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    ## Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    - name: Publish application
      run: dotnet publish Gui/Gui.csproj -c PublishRelease -r $env:Runtime --self-contained
      env:
        Runtime: ${{ format('win7-{0}', matrix.arch) }}

    ## Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create msi package
      run: dotnet build Packaging/Windows/Windows.wixproj -c PublishRelease -p:OutputName=$env:OutputName -o Packaging/Windows/Packages -p:platform=$env:Arch #-p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Arch: ${{ matrix.arch }}
        OutputName: ${{ format('PTZJoystickControl_v{0}_win_{1}', needs.bump-version.outputs.VERSION, matrix.arch) }}

    ## Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Upload build artifacts (msi packages)
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v3
      with:
        name: MSI Packages
        path: Packaging/Windows/Packages/**/*.msi

    - name: GH Release
      if: ${{ github.event_name == 'push' }}
      uses: softprops/action-gh-release@v0.1.15
      with:
        prerelease: true
        tag_name: v${{ needs.bump-version.outputs.VERSION }}
        files: Packaging/Windows/Packages/**/*.msi

  build-macos-packeges:
    needs: bump-version
    runs-on: macos-latest

    steps:    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Build
      run: dotnet publish Gui/Gui.csproj -c PublishRelease -r osx-x64 --self-contained #/p:PublishSingleFile=true /p:PublishTrimmed=true

    - name: Install Dependencies
      run: |
        brew install create-dmg

    - name: Copy Files into app structure
      run: |
        mkdir -p dist/PTZJoystickControl.app/Contents/MacOS
        mkdir -p dist/PTZJoystickControl.app/Contents/Resources
        cp Gui/bin/PublishRelease/net6.0/osx-x64/publish/* dist/PTZJoystickControl.app/Contents/MacOS
        cp Packaging/Mac/icon.icns dist/PTZJoystickControl.app/Contents/Resources/
        cp Packaging/Mac/Info.plist dist/PTZJoystickControl.app/Contents/

    - name: Update Info.plist version
      run: sed -i '' -e ':a' -e 'N' -e '$!ba' -e "s/<key>CFBundleVersion<\/key>\n\s*<string>[^<]*<\/string>/<key>CFBundleVersion<\/key>\n        <string>{{ needs.bump-version.outputs.VERSION }}<\/string>/g" dist/PTZJoystickControl.app/Contents/Info.plist

    - name: Create Installer
      run: |
        create-dmg \
          --volname "PTZJoystickControl.app" \
          --volicon "dist/PTZJoystickControl.app/Contents/Resources/icon.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "dist/PTZJoystickControl.app/Contents/Resources/icon.icns" 200 190 \
          --hide-extension "PTZJoystickControl.app" \
          --app-drop-link 600 185 \
          ${{ env.OutputName }}.dmg \
          dist/PTZJoystickControl.app
      env:
          OutputName: ${{ format('PTZJoystickControl_v{0}_osx_x64', needs.bump-version.outputs.VERSION) }}

    - name: Upload build artifacts (dmg package)
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v3
      with:
          name: DMG Package
          path: "*.dmg"

    - name: GH Release
      if: ${{ github.event_name == 'push' }}
      uses: softprops/action-gh-release@v0.1.15
      with:
          prerelease: true
          tag_name: v${{ needs.bump-version.outputs.VERSION }}
          files: "*.dmg"
